{"ast":null,"code":"import { PAGINATION_QUERY } from '../components/Pagination';\nexport default function paginationField() {\n  return {\n    keyArgs: false\n    /* tells apollo that we will take care of everything */\n    ,\n\n    read(existing = [], {\n      args,\n      cache\n    }) {\n      /* first thing it does is asks the read function for those items */\n      const {\n        skip,\n        first\n      } = args;\n      /* Read number of items on the page from the cache */\n\n      const data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      /* We can either do one of two things */\n\n      /* First thing we can do is return the items because they are already in cache */\n\n      /* The other thing we can do is return false from here */\n    },\n\n    merge() {\n      /* This runs when apollo client comes back from network with our products */\n    }\n\n  };\n}","map":{"version":3,"sources":["/Users/James/Sites/tutorials/advanced-react/sick-fits/frontend/lib/paginationField.js"],"names":["PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","skip","first","data","readQuery","query","merge"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,0BAAjC;AAEA,eAAe,SAASC,eAAT,GAA2B;AACxC,SAAO;AACLC,IAAAA,OAAO,EAAE;AAAM;AADV;;AAELC,IAAAA,IAAI,CAACC,QAAQ,GAAG,EAAZ,EAAgB;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAhB,EAAiC;AACnC;AACA,YAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBH,IAAxB;AACA;;AACA,YAAMI,IAAI,GAAGH,KAAK,CAACI,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEX;AAAT,OAAhB,CAAb;AAEA;;AAEA;;AAEA;AACD,KAbI;;AAcLY,IAAAA,KAAK,GAAG;AACN;AACD;;AAhBI,GAAP;AAkBD","sourcesContent":["import { PAGINATION_QUERY } from '../components/Pagination';\n\nexport default function paginationField() {\n  return {\n    keyArgs: false /* tells apollo that we will take care of everything */,\n    read(existing = [], { args, cache }) {\n      /* first thing it does is asks the read function for those items */\n      const { skip, first } = args;\n      /* Read number of items on the page from the cache */\n      const data = cache.readQuery({ query: PAGINATION_QUERY });\n\n      /* We can either do one of two things */\n\n      /* First thing we can do is return the items because they are already in cache */\n\n      /* The other thing we can do is return false from here */\n    },\n    merge() {\n      /* This runs when apollo client comes back from network with our products */\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}