{"ast":null,"code":"import _slicedToArray from \"/Users/James/Sites/tutorials/advanced-react/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/Users/James/Sites/tutorials/advanced-react/sick-fits/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/James/Sites/tutorials/advanced-react/sick-fits/frontend/components/UpdateProduct.js\",\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation UPDATE_PRODUCT_MUTATION(\\n    $id: ID!\\n    $name: String\\n    $description: String\\n    $price: Int\\n  ) {\\n    updateProduct(\\n      id: $id\\n      data: { id: $id, name: $name, description: $description, price: $price }\\n    ) {\\n      id\\n      name\\n      description\\n      price\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useMutation, useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport { SINGLE_PRODUCT_QUERY } from './SingleProduct';\nvar UPDATE_PRODUCT_MUTATION = gql(_templateObject());\nexport default function UpdateProduct(_ref) {\n  _s();\n\n  var id = _ref.id;\n\n  /* get existing product */\n  var _useQuery = useQuery(SINGLE_PRODUCT_QUERY, {\n    variables: {\n      id: id\n    }\n  }),\n      data = _useQuery.data,\n      error = _useQuery.error,\n      loading = _useQuery.loading;\n\n  console.log(data);\n  /* get mutation to update the product */\n\n  var _useMutation = useMutation(UPDATE_PRODUCT_MUTATION, {\n    variables: {\n      id: id\n      /* TODO Pass in updates  */\n\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      updateProduct = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      updateData = _useMutation2$.data,\n      updateError = _useMutation2$.error,\n      updateLoading = _useMutation2$.loading;\n  /* need the form to handle the updates */\n\n\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Update\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 10\n  }, this);\n}\n\n_s(UpdateProduct, \"CjWxJ4bRQgfXGvD0rCJNxtNp0Lk=\", false, function () {\n  return [useQuery, useMutation];\n});\n\n_c = UpdateProduct;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateProduct\");","map":{"version":3,"sources":["/Users/James/Sites/tutorials/advanced-react/sick-fits/frontend/components/UpdateProduct.js"],"names":["useMutation","useQuery","gql","SINGLE_PRODUCT_QUERY","UPDATE_PRODUCT_MUTATION","UpdateProduct","id","variables","data","error","loading","console","log","updateProduct","updateData","updateError","updateLoading"],"mappings":";;;;;;;;;;;;;;;;;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,gBAAtC;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,oBAAT,QAAqC,iBAArC;AAEA,IAAMC,uBAAuB,GAAGF,GAAH,mBAA7B;AAmBA,eAAe,SAASG,aAAT,OAA+B;AAAA;;AAAA,MAANC,EAAM,QAANA,EAAM;;AAC5C;AAD4C,kBAEXL,QAAQ,CAACE,oBAAD,EAAuB;AAC9DI,IAAAA,SAAS,EAAE;AAAED,MAAAA,EAAE,EAAFA;AAAF;AADmD,GAAvB,CAFG;AAAA,MAEpCE,IAFoC,aAEpCA,IAFoC;AAAA,MAE9BC,KAF8B,aAE9BA,KAF8B;AAAA,MAEvBC,OAFuB,aAEvBA,OAFuB;;AAK5CC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACA;;AAN4C,qBAUxCR,WAAW,CAACI,uBAAD,EAA0B;AACvCG,IAAAA,SAAS,EAAE;AACTD,MAAAA,EAAE,EAAFA;AACA;;AAFS;AAD4B,GAA1B,CAV6B;AAAA;AAAA,MAQ1CO,aAR0C;AAAA;AAAA,MASlCC,UATkC,kBASxCN,IATwC;AAAA,MASfO,WATe,kBAStBN,KATsB;AAAA,MASOO,aATP,kBASFN,OATE;AAgB5C;;;AACA,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GAlBuBL,a;UAEWJ,Q,EAQ7BD,W;;;KAVkBK,a","sourcesContent":["import { useMutation, useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport { SINGLE_PRODUCT_QUERY } from './SingleProduct';\n\nconst UPDATE_PRODUCT_MUTATION = gql`\n  mutation UPDATE_PRODUCT_MUTATION(\n    $id: ID!\n    $name: String\n    $description: String\n    $price: Int\n  ) {\n    updateProduct(\n      id: $id\n      data: { id: $id, name: $name, description: $description, price: $price }\n    ) {\n      id\n      name\n      description\n      price\n    }\n  }\n`;\n\nexport default function UpdateProduct({ id }) {\n  /* get existing product */\n  const { data, error, loading } = useQuery(SINGLE_PRODUCT_QUERY, {\n    variables: { id },\n  });\n  console.log(data);\n  /* get mutation to update the product */\n  const [\n    updateProduct,\n    { data: updateData, error: updateError, loading: updateLoading },\n  ] = useMutation(UPDATE_PRODUCT_MUTATION, {\n    variables: {\n      id,\n      /* TODO Pass in updates  */\n    },\n  });\n  /* need the form to handle the updates */\n  return <p>Update</p>;\n}\n"]},"metadata":{},"sourceType":"module"}