{"ast":null,"code":"import { formatRelativeWithOptions } from 'date-fns/fp';\nimport { PAGINATION_QUERY } from '../components/Pagination';\nexport default function paginationField() {\n  return {\n    keyArgs: false\n    /* tells apollo that we will take care of everything */\n    ,\n    read: function read() {\n      var _data$_allProductsMet;\n\n      var existing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      var _ref = arguments.length > 1 ? arguments[1] : undefined,\n          args = _ref.args,\n          cache = _ref.cache;\n\n      /* first thing it does is asks the read function for those items */\n      var skip = args.skip,\n          first = args.first;\n      /* Read number of items on the page from the cache */\n\n      var data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      var count = data === null || data === void 0 ? void 0 : (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count;\n      var page = skip / first + 1;\n      var pageCnt = Math.ceil(count / first);\n      /* Check if we have existing items */\n\n      var items = existing.slice(skip, skip + first).filter(function (x) {\n        return x;\n      });\n      /* if there are items and there aren't enough to satisfy how many were requested\n      and we are on the last page then just send it */\n\n      if (items.length && items.length !== first && page === pageCnt) return items;\n\n      if (items.length !== first) {\n        /* we don't have any items, we must go to the network to fetch them */\n        return false;\n      }\n      /* We have items, so return them from cache */\n\n\n      if (items.length) return items;\n      /*  go to the network to fetch them */\n\n      return false;\n    },\n    merge: function merge(existing, incoming, _ref2) {\n      var args = _ref2.args;\n      var skip = args.skip,\n          first = args.first;\n      /* This runs when apollo client comes back from network with our products */\n\n      var merged = existing ? existing.slice(0) : [];\n\n      for (var i = skip; i < skip + incoming.length; ++i) {\n        merged[i] = incoming[i - skip];\n      }\n\n      return merged;\n    }\n  };\n}","map":{"version":3,"sources":["/Users/James/Sites/tutorials/advanced-react/sick-fits/frontend/lib/paginationField.js"],"names":["formatRelativeWithOptions","PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","skip","first","data","readQuery","query","count","_allProductsMeta","page","pageCnt","Math","ceil","items","slice","filter","x","length","merge","incoming","merged","i"],"mappings":"AAAA,SAASA,yBAAT,QAA0C,aAA1C;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AAEA,eAAe,SAASC,eAAT,GAA2B;AACxC,SAAO;AACLC,IAAAA,OAAO,EAAE;AAAM;AADV;AAELC,IAAAA,IAFK,kBAEgC;AAAA;;AAAA,UAAhCC,QAAgC,uEAArB,EAAqB;;AAAA;AAAA,UAAfC,IAAe,QAAfA,IAAe;AAAA,UAATC,KAAS,QAATA,KAAS;;AACnC;AADmC,UAE3BC,IAF2B,GAEXF,IAFW,CAE3BE,IAF2B;AAAA,UAErBC,KAFqB,GAEXH,IAFW,CAErBG,KAFqB;AAGnC;;AACA,UAAMC,IAAI,GAAGH,KAAK,CAACI,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEX;AAAT,OAAhB,CAAb;AACA,UAAMY,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,gBAAT,0DAAG,sBAAwBD,KAAtC;AACA,UAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B;AACA,UAAMO,OAAO,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAhB;AAEA;;AACA,UAAMU,KAAK,GAAGd,QAAQ,CAACe,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA0C,UAACC,CAAD;AAAA,eAAOA,CAAP;AAAA,OAA1C,CAAd;AACA;AACN;;AACM,UAAIH,KAAK,CAACI,MAAN,IAAgBJ,KAAK,CAACI,MAAN,KAAiBd,KAAjC,IAA0CM,IAAI,KAAKC,OAAvD,EACE,OAAOG,KAAP;;AAEF,UAAIA,KAAK,CAACI,MAAN,KAAiBd,KAArB,EAA4B;AAC1B;AACA,eAAO,KAAP;AACD;AACD;;;AACA,UAAIU,KAAK,CAACI,MAAV,EAAkB,OAAOJ,KAAP;AAClB;;AACA,aAAO,KAAP;AACD,KA1BI;AA2BLK,IAAAA,KA3BK,iBA2BCnB,QA3BD,EA2BWoB,QA3BX,SA2B+B;AAAA,UAARnB,IAAQ,SAARA,IAAQ;AAAA,UAC1BE,IAD0B,GACVF,IADU,CAC1BE,IAD0B;AAAA,UACpBC,KADoB,GACVH,IADU,CACpBG,KADoB;AAElC;;AACA,UAAMiB,MAAM,GAAGrB,QAAQ,GAAGA,QAAQ,CAACe,KAAT,CAAe,CAAf,CAAH,GAAuB,EAA9C;;AACA,WAAK,IAAIO,CAAC,GAAGnB,IAAb,EAAmBmB,CAAC,GAAGnB,IAAI,GAAGiB,QAAQ,CAACF,MAAvC,EAA+C,EAAEI,CAAjD,EAAoD;AAClDD,QAAAA,MAAM,CAACC,CAAD,CAAN,GAAYF,QAAQ,CAACE,CAAC,GAAGnB,IAAL,CAApB;AACD;;AAED,aAAOkB,MAAP;AACD;AApCI,GAAP;AAsCD","sourcesContent":["import { formatRelativeWithOptions } from 'date-fns/fp';\nimport { PAGINATION_QUERY } from '../components/Pagination';\n\nexport default function paginationField() {\n  return {\n    keyArgs: false /* tells apollo that we will take care of everything */,\n    read(existing = [], { args, cache }) {\n      /* first thing it does is asks the read function for those items */\n      const { skip, first } = args;\n      /* Read number of items on the page from the cache */\n      const data = cache.readQuery({ query: PAGINATION_QUERY });\n      const count = data?._allProductsMeta?.count;\n      const page = skip / first + 1;\n      const pageCnt = Math.ceil(count / first);\n\n      /* Check if we have existing items */\n      const items = existing.slice(skip, skip + first).filter((x) => x);\n      /* if there are items and there aren't enough to satisfy how many were requested\n      and we are on the last page then just send it */\n      if (items.length && items.length !== first && page === pageCnt)\n        return items;\n\n      if (items.length !== first) {\n        /* we don't have any items, we must go to the network to fetch them */\n        return false;\n      }\n      /* We have items, so return them from cache */\n      if (items.length) return items;\n      /*  go to the network to fetch them */\n      return false;\n    },\n    merge(existing, incoming, { args }) {\n      const { skip, first } = args;\n      /* This runs when apollo client comes back from network with our products */\n      const merged = existing ? existing.slice(0) : [];\n      for (let i = skip; i < skip + incoming.length; ++i) {\n        merged[i] = incoming[i - skip];\n      }\n\n      return merged;\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}