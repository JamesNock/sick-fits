{"ast":null,"code":"import { formatRelativeWithOptions } from 'date-fns/fp';\nimport { PAGINATION_QUERY } from '../components/Pagination';\nexport default function paginationField() {\n  return {\n    keyArgs: false\n    /* tells apollo that we will take care of everything */\n    ,\n\n    read(existing = [], {\n      args,\n      cache\n    }) {\n      var _data$_allProductsMet;\n\n      /* first thing it does is asks the read function for those items */\n      const {\n        skip,\n        first\n      } = args;\n      /* Read number of items on the page from the cache */\n\n      const data = cache.readQuery({\n        query: PAGINATION_QUERY\n      });\n      const count = data === null || data === void 0 ? void 0 : (_data$_allProductsMet = data._allProductsMeta) === null || _data$_allProductsMet === void 0 ? void 0 : _data$_allProductsMet.count;\n      const page = skip / first + 1;\n      const pages = Math.ceil(count / first);\n      /* Check if we have existing items */\n\n      const items = existing.slice(skip, skip + first).filter(x => x);\n\n      if (items.length !== first) {\n        /* we don't have any items, we must go to the network to fetch them */\n        return false;\n      }\n      /* We have items, so return them from cache */\n\n\n      if (items.length) return items;\n      /*  go to the network to fetch them */\n\n      return false;\n    },\n\n    merge() {\n      /* This runs when apollo client comes back from network with our products */\n    }\n\n  };\n}","map":{"version":3,"sources":["/Users/James/Sites/tutorials/advanced-react/sick-fits/frontend/lib/paginationField.js"],"names":["formatRelativeWithOptions","PAGINATION_QUERY","paginationField","keyArgs","read","existing","args","cache","skip","first","data","readQuery","query","count","_allProductsMeta","page","pages","Math","ceil","items","slice","filter","x","length","merge"],"mappings":"AAAA,SAASA,yBAAT,QAA0C,aAA1C;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AAEA,eAAe,SAASC,eAAT,GAA2B;AACxC,SAAO;AACLC,IAAAA,OAAO,EAAE;AAAM;AADV;;AAELC,IAAAA,IAAI,CAACC,QAAQ,GAAG,EAAZ,EAAgB;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAhB,EAAiC;AAAA;;AACnC;AACA,YAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBH,IAAxB;AACA;;AACA,YAAMI,IAAI,GAAGH,KAAK,CAACI,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEX;AAAT,OAAhB,CAAb;AACA,YAAMY,KAAK,GAAGH,IAAH,aAAGA,IAAH,gDAAGA,IAAI,CAAEI,gBAAT,0DAAG,sBAAwBD,KAAtC;AACA,YAAME,IAAI,GAAGP,IAAI,GAAGC,KAAP,GAAe,CAA5B;AACA,YAAMO,KAAK,GAAGC,IAAI,CAACC,IAAL,CAAUL,KAAK,GAAGJ,KAAlB,CAAd;AAEA;;AACA,YAAMU,KAAK,GAAGd,QAAQ,CAACe,KAAT,CAAeZ,IAAf,EAAqBA,IAAI,GAAGC,KAA5B,EAAmCY,MAAnC,CAA2CC,CAAD,IAAOA,CAAjD,CAAd;;AACA,UAAIH,KAAK,CAACI,MAAN,KAAiBd,KAArB,EAA4B;AAC1B;AACA,eAAO,KAAP;AACD;AACD;;;AACA,UAAIU,KAAK,CAACI,MAAV,EAAkB,OAAOJ,KAAP;AAClB;;AACA,aAAO,KAAP;AACD,KArBI;;AAsBLK,IAAAA,KAAK,GAAG;AACN;AACD;;AAxBI,GAAP;AA0BD","sourcesContent":["import { formatRelativeWithOptions } from 'date-fns/fp';\nimport { PAGINATION_QUERY } from '../components/Pagination';\n\nexport default function paginationField() {\n  return {\n    keyArgs: false /* tells apollo that we will take care of everything */,\n    read(existing = [], { args, cache }) {\n      /* first thing it does is asks the read function for those items */\n      const { skip, first } = args;\n      /* Read number of items on the page from the cache */\n      const data = cache.readQuery({ query: PAGINATION_QUERY });\n      const count = data?._allProductsMeta?.count;\n      const page = skip / first + 1;\n      const pages = Math.ceil(count / first);\n\n      /* Check if we have existing items */\n      const items = existing.slice(skip, skip + first).filter((x) => x);\n      if (items.length !== first) {\n        /* we don't have any items, we must go to the network to fetch them */\n        return false;\n      }\n      /* We have items, so return them from cache */\n      if (items.length) return items;\n      /*  go to the network to fetch them */\n      return false;\n    },\n    merge() {\n      /* This runs when apollo client comes back from network with our products */\n    },\n  };\n}\n"]},"metadata":{},"sourceType":"module"}